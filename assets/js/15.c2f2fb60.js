(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{335:function(s,t,r){"use strict";r.r(t);var e=r(33),a=Object(e.a)({},(function(){var s=this,t=s.$createElement,r=s._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[r("h1",{attrs:{id:"cgroupv2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cgroupv2"}},[s._v("#")]),s._v(" cGroupv2")]),s._v(" "),r("ul",[r("li",[s._v("https://github.com/torvalds/linux/blob/master/Documentation/admin-guide/cgroup-v2.rst")]),s._v(" "),r("li",[s._v("https://blog.csdn.net/juS3Ve/article/details/78769197")]),s._v(" "),r("li",[s._v("https://blog.csdn.net/sinat_20184565/article/details/98475824")]),s._v(" "),r("li",[s._v("https://hustcat.github.io/cgroup-v2-and-writeback-support/")]),s._v(" "),r("li",[s._v("https://www.codercto.com/a/57439.html")]),s._v(" "),r("li",[s._v("https://my.oschina.net/u/1262062/blog/2051159")]),s._v(" "),r("li",[s._v("https://docs.docker.com/config/containers/resource_constraints/")]),s._v(" "),r("li",[s._v("http://www.jinbuguo.com/systemd/systemd.html#systemd.unified_cgroup_hierarchy")]),s._v(" "),r("li",[s._v("https://www.redhat.com/sysadmin/fedora-31-control-group-v2")]),s._v(" "),r("li",[s._v("https://facebookmicrosites.github.io/cgroup2/")]),s._v(" "),r("li",[s._v("https://wiki.archlinux.org/index.php?title=Cgroups&oldid=596909")]),s._v(" "),r("li",[s._v("https://www.lijiaocn.com/%E6%8A%80%E5%B7%A7/2019/01/28/linux-tool-cgroup-detail.html")])]),s._v(" "),r("h2",{attrs:{id:"fedora-31-恢复到-cgroupv1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fedora-31-恢复到-cgroupv1"}},[s._v("#")]),s._v(" Fedora 31+ 恢复到 cGroupv1")]),s._v(" "),r("blockquote",[r("p",[s._v("在 Fedora 31+ 中使用 Docker "),r("strong",[s._v("必须")]),s._v(" 恢复到 cGroupv1")])]),s._v(" "),r("ul",[r("li",[s._v("https://www.linuxprobe.com/fedora-30-shell.html")])]),s._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[s._v("$ "),r("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" dnf "),r("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" grubby\n\n$ "),r("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" grubby --update-kernel"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("ALL --args"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[s._v('"systemd.unified_cgroup_hierarchy=0"')]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 恢复")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# $ sudo grubby --update-kernel=ALL --remove-args="systemd.unified_cgroup_hierarchy=0"')]),s._v("\n")])])]),r("ul",[r("li",[s._v("https://github.com/docker/for-linux/issues/665")])]),s._v(" "),r("h2",{attrs:{id:"禁用-cgroup-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#禁用-cgroup-1"}},[s._v("#")]),s._v(" 禁用 Cgroup 1")]),s._v(" "),r("p",[s._v("添加内核参数 "),r("code",[s._v("cgroup_no_v1=all")])]),s._v(" "),r("h2",{attrs:{id:"说明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[s._v("#")]),s._v(" 说明")]),s._v(" "),r("p",[s._v("cgroup v2 实现的 controller 是 cgroup v1 的子集，可以同时使用 cgroup v1 和 cgroup v2，但一个controller 不能既在 cgroup v1 中使用，又在 cgroup v2 中使用")]),s._v(" "),r("ul",[r("li",[r("p",[r("code",[s._v("cgroup")]),s._v(" 关联一组 task 和一组 subsystem 的配置参数。一个 task 对应一个进程, cgroup 是资源分片的最小单位。")])]),s._v(" "),r("li",[r("p",[r("code",[s._v("subsystem")]),s._v(" 资源管理器，一个 subsystem 对应一项资源的管理，如 cpu, cpuset, memory 等")])]),s._v(" "),r("li",[r("p",[r("code",[s._v("hierarchy")]),s._v(" 关联一个到多个 subsystem 和一组树形结构的 cgroup. 和 cgroup 不同，hierarchy 包含的是可管理的 subsystem 而非具体参数")])]),s._v(" "),r("li",[r("p",[s._v("一个 hierarchy 可以有多个 subsystem (mount 的时候 hierarchy 可以 attach 多个 subsystem)。一个hierarchy 可以有一个或多个 subsystem，这个从 /sys/fs/cgroup 中可以看出来 cpu 和 cpuacct 可以同属于一个 hierarchy，而 memory 则仅属于一个 hierarchy")])]),s._v(" "),r("li",[r("p",[s._v("一个已经被挂载的 subsystem 只能被再次挂载在一个空的 hierarchy 上 (已经 mount 一个 subsystem 的hierarchy 不能挂载一个已经被其它 hierarchy 挂载的 subsystem)。一个 subsystem 不能挂载到一个已经挂载了不同 subsystem 的 hierarchy 上。")])]),s._v(" "),r("li",[r("p",[s._v("subsystem 相同的 hierarchy 是被重复使用的。")])]),s._v(" "),r("li",[r("p",[s._v("当创建一个新的 hierarchy时，如果使用的 subsystem 被其他 hierarchy 使用，则会返回 EBUSY 错误。如 /sys/fs/cgroup 中已经在 cpuset 和 memory 中单独使用了名为 cpuset 和 memory 的 subsystem，则重新创建一个包含了它们的 hierarchy会返回错误。")])])]),s._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[s._v("$ "),r("span",{pre:!0,attrs:{class:"token function"}},[s._v("mount")]),s._v(" -t cgroup -o cpuset,memory mem1 cgrp1/\nmount: mem1 is already mounted or /cgroup/cgrp1 busy\n")])])]),r("ul",[r("li",[r("p",[s._v("每个 task 只能在同一个 hierarchy 的唯一一个 cgroup 里(不能在同一个 hierarchy 下有超过一个 cgroup 的tasks 里同时有这个进程的 pid)。在 hierarchy memory 中创建 2 个 cgroup mem1 和 mem2，可以看到将当前bash 进程写入到 mem2/tasks 之后，mem1/tasks 中的内容就会被清空。")])]),s._v(" "),r("li",[r("p",[s._v("子进程在被 fork 出时自动继承父进程所在 cgroup，但是 fork 之后就可以按需调整到其他 cgroup")])])]),s._v(" "),r("h2",{attrs:{id:"参数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[s._v("#")]),s._v(" 参数")]),s._v(" "),r("ul",[r("li",[r("code",[s._v("cpu.cfs_period_us")]),s._v(" cpu 分配的周期(微秒），默认为 "),r("code",[s._v("100000")])]),s._v(" "),r("li",[r("code",[s._v("cpu.cfs_quota_us")]),s._v(" 表示该 control group 限制占用的时间（微秒），默认为 -1，表示不限制。如果设为"),r("code",[s._v("50000")]),s._v("，表示占用 "),r("code",[s._v("50000/10000=50%")]),s._v(" 的 CPU。对于单核来说，最大等于 cpu.cfs_period_us 的值，对于多核来说，可以理解为最多可使用的 cpu 核数（4 核使用 2 核 "),r("code",[s._v("200000")]),s._v("）")])]),s._v(" "),r("h2",{attrs:{id:"子系统-subsystems"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#子系统-subsystems"}},[s._v("#")]),s._v(" 子系统 subsystems")]),s._v(" "),r("ul",[r("li",[r("p",[s._v("https://github.com/torvalds/linux/tree/master/Documentation/admin-guide/cgroup-v1")])]),s._v(" "),r("li",[r("p",[r("code",[s._v("blkio")]),s._v(" 子系统，可以限制进程的块设备 io。")])]),s._v(" "),r("li",[r("p",[r("code",[s._v("cpu")]),s._v(" 子系统，主要限制进程的 cpu 使用率。")])]),s._v(" "),r("li",[r("p",[r("code",[s._v("cpuacct")]),s._v(" 子系统，可以统计 cgroups 中的进程的 cpu 使用报告。")])]),s._v(" "),r("li",[r("p",[r("code",[s._v("cpuset")]),s._v(" 子系统，可以为 cgroups 中的进程分配单独的 cpu 节点或者内存节点。")])]),s._v(" "),r("li",[r("p",[r("code",[s._v("devices")]),s._v(" 子系统，可以控制进程能够访问某些设备。")])]),s._v(" "),r("li",[r("p",[r("code",[s._v("freezer")]),s._v(" 子系统，可以挂起或者恢复 cgroups 中的进程。")])]),s._v(" "),r("li",[r("p",[r("code",[s._v("hugetlb")]),s._v(" 这个子系统主要针对于HugeTLB系统进行限制，这是一个大页文件系统。")])]),s._v(" "),r("li",[r("p",[r("code",[s._v("memory")]),s._v(" 子系统，可以限制进程的 memory 使用量。")])]),s._v(" "),r("li",[r("p",[r("code",[s._v("net_cls")]),s._v(" 子系统，可以标记 cgroups 中进程的网络数据包，然后可以使用 tc 模块（traffic control）对数据包进行控制。")])]),s._v(" "),r("li",[r("p",[r("code",[s._v("net_prio")]),s._v(" 这个子系统用来设计网络流量的优先级")])]),s._v(" "),r("li",[r("p",[r("code",[s._v("pids")])])]),s._v(" "),r("li",[r("p",[r("code",[s._v("rdma")])])])]),s._v(" "),r("h2",{attrs:{id:"手动挂载"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#手动挂载"}},[s._v("#")]),s._v(" 手动挂载")]),s._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[s._v("/cgroup/\n├── blkio                             "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("--------------- hierarchy/root cgroup\n│   ├── blkio.io_merged               "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("--------------- subsystem parameter\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n│   ├── blkio.weight\n│   ├── blkio.weight_device\n│   ├── cgroup.event_control\n│   ├── cgroup.procs\n│   ├── lxc                          "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("--------------- cgroup\n│   │   ├── blkio.io_merged          "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("--------------- subsystem parameter\n│   │   ├── blkio.io_queued\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n│   │   └── tasks                    "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("--------------- task list\n│   ├── notify_on_release\n│   ├── release_agent\n│   └── tasks\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n\n")])])]),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[s._v("$ "),r("span",{pre:!0,attrs:{class:"token function"}},[s._v("mount")]),s._v(" -t tmpfs cgroup_root /sys/fs/cgroup\n$ "),r("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" /sys/fs/cgroup/cpuset\n$ "),r("span",{pre:!0,attrs:{class:"token function"}},[s._v("mount")]),s._v(" -t cgroup cpuset -ocpuset /sys/fs/cgroup/cpuset\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);